# --- listeners configuration ---

# whether jdbc logging is enabled
listener.logging.enabled=true
# whether connection event (open, close, commit, rollback) should be logged
listener.logging.logConnectionEvent=true
# whether sql execution (executeQuery, executeUpdate) should be logged
listener.logging.logSqlExecution=true
# only sql executions exceeding this time (ms) is logged
listener.logging.logSqlExecutionOfMinimalUseTime=0
# whether resultset event (next) should be logged
listener.logging.logResultSetEvent=true
# only fetching rows of rownum greater than this is logged
listener.logging.logResultSetEventOfMinimalRow=0

# whether connection leak detection is enabled
listener.leakDetection.enabled=true
# full datasource class name (example com.zaxxer.hikari.HikariDataSource) to detect. 
# if this property is not empty, only connections made by this type of datasource is checked for leaking. Thus prevents some false alert when wrapping connection pool prefetchs and keeps some connection.
listener.leakDetection.dataSourceType=
# how much time (ms) since connection open without close is considered leak
listener.leakDetection.timeThreshold=300000
# how ofen the detection thread checks every connection
listener.leakDetection.detectionInterval=30000

# --- logging configurations ---
logger.logToSysout=true
logger.logToFile=false
logger.logToFilePath=./my-jdbc-agent.log
